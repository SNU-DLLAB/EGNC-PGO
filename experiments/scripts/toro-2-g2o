#!/usr/bin/env python
import argparse
import numpy as np

"""
##     ##    ###    #### ##    ##
###   ###   ## ##    ##  ###   ##
#### ####  ##   ##   ##  ####  ##
## ### ## ##     ##  ##  ## ## ##
##     ## #########  ##  ##  ####
##     ## ##     ##  ##  ##   ###
##     ## ##     ## #### ##    ##
"""


def handle_args():
    parser = argparse.ArgumentParser(
        description="Converts a 2d toro file to a 2d g2o file (used for datasets/csail)"
    )
    parser.add_argument(
        "-i", "--input", type=str, required=True, help="The input TORO file."
    )
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        required=True,
        help="The name of the file to save out the g2o file.",
    )
    return parser.parse_args()


def main():
    args = handle_args()

    with open(args.input) as infile:
        with open(args.output, "w") as outfile:
            for line in infile.readlines():
                tokens = line.strip().split(" ")
                if tokens[0] == "VERTEX2":
                    """
                    Converts a TORO VERTEX2 to g2o VERTEX_SE2
                    """
                    idx, x, y, th = tokens[1:]
                    outfile.write("VERTEX_SE2 {} {} {} {}\n".format(idx, x, y, th))

                elif tokens[0] == "EDGE2":
                    """
                    Parses a TORO SE(2) Edge line
                    VERTEX2 IDout IDin dx dy dth I11 I12 I22 I33 I13 I23
                    """
                    ida, idb = tokens[1:3]
                    x, y, th = float(tokens[3]), float(tokens[4]), float(tokens[5])
                    I11, I12, I22, I33, I13, I23 = map(float, tokens[6:])
                    I = np.array([[I11, I12, I13], [I12, I22, I23], [I13, I23, I33]])
                    outfile.write(
                        "EDGE_SE2 {} {} {} {} {} {} {} {} {} {} {} \n".format(
                            ida,
                            idb,
                            x,
                            y,
                            th,
                            I[0, 0],
                            I[0, 1],
                            I[0, 2],
                            I[1, 1],
                            I[1, 2],
                            I[2, 2],
                        )
                    )


if __name__ == "__main__":
    main()
